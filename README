#!/usr/bin/python
### ### As with any python module, we begin by importing psycops:

from psycops import *
import random
import math
import sys

### If there are score features desired that are not
### directly supported by psycops, just print them:

print 'f1 0 65536 10 1 .3 .1'

### However, a function def is still an event, and so
### could be defined as Event(['f', 0, 65536, 1, .3, .1])

### A Phrase is a class that inherits from the native
### python list type.  Here we make one as a container
### to hang things on.

triad = Phrase()

### An Event represents one line of a csound cscore.
### An Event can be initialized with either a statement
### as would be legal in csound (below) or with an array
### in which each element would be a consecutive p-field

### e.g. foo = Event( ['i', 0, 1, 10440, 100, 1] )

basenote = Event("i1 0 1 5000 200 1") 

triad.append(basenote)

### Since 'triad' is a Phrase(), and Phrase inherits from
### list, we can call the normal 'append()' function on it
### to add the previous Event.
### We can just as easily add phrases to phrases to
### create a heirachy of phrases that each contain their
### subordinates.

### The most important feature of psycops is that Phrases, 
### and Events can be altered in musically meaningful ways
### at many different points along their construction, copying,
### or performance.  Here we alter the 'basenote' Event during
### a copy to alter the start time and transposition factor.
### Transposition requires a multiplier, where '1' would not
### change the pitch of the Event/Phrase.  Psycops expects
### that p4 represents amplitude, while p5 represents pitch.

### The available alteration parameters are:
### start:	absolute addition to start time of Event(s)
### warp:	multiply start time of Event(s) by some factor
### 		*warp affects duration times by the same factor
### 		by default*
### dwarp:	optionally override duration warping and use
### 		this factor instead.  Use '1' for no change.
### transpose:	Modify pitch by this factor.
### 
triad.append(basenote.copy(start = 1, transpose = MINOR_THIRD))
triad.append(basenote.copy(start = 2, transpose = MAJOR_THIRD))
triad.append(basenote.copy(start = 3, transpose = PERFECT_FIFTH))
triad.append(basenote.copy(start = 4, transpose = OCTAVE))

### Put in a random pan

for note in triad:
	note[6] = random.random()


### So now the 'triad' Phrase holds four notes that would 
### be performed in succession one second apart outlining
### one octave of a major triad.
### Constants like MINOR_THIRD are provided with just tempered
### fractions like 4/3 for a PERFECT FOURTH
### There is also a function named 'half_step(count)
### which will return a multiplier suitable for altering
### the pitch of an Event or Phrase by 'count' number of
### Equal tempered half-steps

triad.warp = 1.3

### Here we see that the properties of Events and Phrases
### can be set as simple properties of the objects themselves.
### Unlike copy-time alteration or play-time alteration
### This method of course alters the original object itself
### causing the loss of whatever alteration might have existed
### before hand.  

### Note that the original p-field values stored in single
### Events contained in Phrases which
### would be affected during copy or performance are not
### changed, however, something like 'myevent[2] = .3' would
### put a new value into that p-field postion, changing the
### Event forever.

### Here we create a Phrase which will contain many copies of the
### previous Phrase, 'triad'.

big = Phrase()

### Now we spray 30 'triad's into the 'big' Phrase, altering
### The playable pitch of each one as we go

for num in range(0, 3):
	new_phrase = triad.copy(start = num * .8, transpose = 1 + num / 15.0 )
	big.append(new_phrase)

### Event.out(), or Phrase.out() causes return the csound statements
### ready for storing or printing.  Here I excrete the 'big' Phrase
### many times with certain alterations along the way.

for time in range(3):
	print big.out(start = time * .7)

### Note that alterations of time, pitch etc. propagate down through
### all levels of a complex heirarchy of Phrases/Events.  I need to
### write an attribute that will block attribute modification from
### a given level down.

### Thanks for your comments.

### toby@tobiah.org



